diff --git a/crypto/build.info b/crypto/build.info
index b515b7318e..f090ff458d 100644
--- a/crypto/build.info
+++ b/crypto/build.info
@@ -1,7 +1,7 @@
 LIBS=../libcrypto
 SOURCE[../libcrypto]=\
         cryptlib.c mem.c mem_dbg.c cversion.c ex_data.c cpt_err.c \
-        ebcdic.c uid.c o_time.c o_str.c o_dir.c o_fopen.c ctype.c \
+        ebcdic.c uid.c o_time.c o_str.c o_dir.c o_fopen.c pathtools.c ctype.c \
         threads_pthread.c threads_win.c threads_none.c getenv.c \
         o_init.c o_fips.c mem_sec.c init.c {- $target{cpuid_asm_src} -} \
         {- $target{uplink_aux_src} -}
--- openssl-1.1.1n/crypto/engine/eng_list.c.orig	2022-03-15 15:37:47.000000000 +0100
+++ openssl-1.1.1n/crypto/engine/eng_list.c	2022-04-24 19:44:11.950597400 +0200
@@ -9,6 +9,7 @@
  */
 
 #include "eng_local.h"
+#include "pathtools.h"
 
 /*
  * The linked-list of pointers to engine types. engine_list_head incorporates
@@ -36,6 +37,20 @@
  * cleanup.
  */
 
+char * enginedir_relocation(const char *path)
+{
+  char exe_path[PATH_MAX];
+  get_executable_path (NULL, &exe_path[0], sizeof(exe_path)/sizeof(exe_path[0]));
+  if (strrchr (exe_path, '/') != NULL)
+  {
+     strrchr (exe_path, '/')[1] = '\0';
+  }
+  char * rel_to_datadir = get_relative_path (OPENSSLBIN, path);
+  strcat (exe_path, rel_to_datadir);
+  simplify_path (&exe_path[0]);
+  return malloc_copy_string(exe_path);
+}
+
 static void engine_list_cleanup(void)
 {
     ENGINE *iterator = engine_list_head;
@@ -404,8 +419,13 @@
      * Prevent infinite recursion if we're looking for the dynamic engine.
      */
     if (strcmp(id, "dynamic")) {
-        if ((load_dir = ossl_safe_getenv("OPENSSL_ENGINES")) == NULL)
-            load_dir = ENGINESDIR;
+        if ((load_dir = ossl_safe_getenv("OPENSSL_ENGINES")) == NULL) {
+            static char * reloc = NULL;
+            if (reloc == NULL) {
+                reloc = enginedir_relocation(ENGINESDIR);
+            }
+            load_dir = reloc;
+        }
         iterator = ENGINE_by_id("dynamic");
         if (!iterator || !ENGINE_ctrl_cmd_string(iterator, "ID", id, 0) ||
             !ENGINE_ctrl_cmd_string(iterator, "DIR_LOAD", "2", 0) ||
--- openssl-1.1.1n/crypto/x509/x509_def.c.orig	2022-03-15 15:37:47.000000000 +0100
+++ openssl-1.1.1n/crypto/x509/x509_def.c	2022-04-24 19:42:15.123279000 +0200
@@ -9,27 +9,58 @@
 
 #include <stdio.h>
 #include "internal/cryptlib.h"
+#include "pathtools.h"
 #include <openssl/crypto.h>
 #include <openssl/x509.h>
 
+char * openssl_relocation(const char *path)
+{
+  char exe_path[PATH_MAX];
+  get_executable_path (NULL, &exe_path[0], sizeof(exe_path)/sizeof(exe_path[0]));
+  if (strrchr (exe_path, '/') != NULL)
+  {
+     strrchr (exe_path, '/')[1] = '\0';
+  }
+  char * rel_to_datadir = get_relative_path (OPENSSLBIN, path);
+  strcat (exe_path, rel_to_datadir);
+  simplify_path (&exe_path[0]);
+  return malloc_copy_string(exe_path);
+}
+
 const char *X509_get_default_private_dir(void)
 {
-    return X509_PRIVATE_DIR;
+    static char * reloc = NULL;
+    if (reloc == NULL) {
+        reloc = openssl_relocation(X509_PRIVATE_DIR);
+    }
+    return reloc;
 }
 
 const char *X509_get_default_cert_area(void)
 {
-    return X509_CERT_AREA;
+    static char * reloc = NULL;
+    if (reloc == NULL) {
+        reloc = openssl_relocation(X509_CERT_AREA);
+    }
+    return reloc;
 }
 
 const char *X509_get_default_cert_dir(void)
 {
-    return X509_CERT_DIR;
+    static char * reloc = NULL;
+    if (reloc == NULL) {
+        reloc = openssl_relocation(X509_CERT_DIR);
+    }
+    return reloc;
 }
 
 const char *X509_get_default_cert_file(void)
 {
-    return X509_CERT_FILE;
+    static char * reloc = NULL;
+    if (reloc == NULL) {
+        reloc = openssl_relocation(X509_CERT_FILE);
+    }
+    return reloc;
 }
 
 const char *X509_get_default_cert_dir_env(void)
